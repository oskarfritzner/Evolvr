rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isParticipant(participants) {
      return participants.hasAny([request.auth.uid]);
    }

    function isInvited(invites) {
      return invites.hasAny([request.auth.uid]);
    }

    function isCreator(createdBy) {
      return createdBy == request.auth.uid;
    }

    function hasCompletedOnboarding() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    function isRoutineCreator(routineData) {
      return isAuthenticated() && routineData.createdBy == request.auth.uid;
    }
    
    function isRoutineParticipant(routineData) {
      return isAuthenticated() && (routineData.participants.hasAny([request.auth.uid]));
    }
    
    function areFriends(userId) {
      return isAuthenticated() && (
        get(/databases/$(database)/documents/users/$(userId)).data.friends.hasAny([request.auth.uid]) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.friends.hasAny([userId])
      );
    }

    // Users collection
    match /users/{userId} {
      // Allow reading own data or basic public data of other users
      allow read: if isAuthenticated() && (
        isOwner(userId) || 
        (
          exists(/databases/$(database)/documents/users/$(userId)) &&
          (
            // Allow reading basic public data
            request.path.size() == 2 || // Reading entire document
            request.path[-1] in ['username', 'photoURL', 'displayName', 'bio', 'stats', 'badges', 'level'] // Reading specific public fields
          )
        )
      );
      
      // Allow creating own user document
      allow create: if isOwner(userId);
      
      // Allow updating own data
      allow update: if isOwner(userId) || isAdmin();
      
      // Allow deleting own data
      allow delete: if isOwner(userId) || isAdmin();

      // User's private subcollections
      match /completions/{completionId} {
        allow read, write: if isOwner(userId);
      }

      match /notifications/{notificationId} {
        allow read, write: if isOwner(userId);
      }
      
      match /coachingMessages/{messageId} {
        allow read, write: if isOwner(userId);
      }
      
      match /coaching/{sessionId} {
        allow read, write: if isOwner(userId);
      }

      match /userChallenges/{challengeId} {
        allow read: if isAuthenticated() && isOwner(userId);
        allow write: if isOwner(userId);
      }

      match /journals/{journalId} {
        allow read, write: if isOwner(userId);
      }

      match /goals/{goalId} {
        allow read, write: if isOwner(userId);
      }

      match /goalStats/{statId} {
        allow read, write: if isOwner(userId);
      }
    }

    // Tasks collection
    match /tasks/{taskId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Allow any authenticated user to update task status
      allow update: if isAuthenticated() && (
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['status', 'completed', 'completedAt', 'lastUpdatedBy']) &&
        request.resource.data.lastUpdatedBy == request.auth.uid &&
        request.resource.data.status in ['PENDING', 'COMPLETED', 'FAILED']
      );
    }

    // Add task subcollections rules
    match /routines/{routineId}/tasks/{taskId} {
      allow read: if isAuthenticated() && (
        resource == null ||
        resource.data.participants.hasAny([request.auth.uid]) ||
        resource.data.createdBy == request.auth.uid ||
        get(/databases/$(database)/documents/routines/$(routineId)).data.participants.hasAny([request.auth.uid])
      );
      allow create: if isAuthenticated() && (
        request.resource.data.createdBy == request.auth.uid ||
        get(/databases/$(database)/documents/routines/$(routineId)).data.createdBy == request.auth.uid
      );
      allow update: if isAuthenticated() && (
        resource.data.participants.hasAny([request.auth.uid]) ||
        resource.data.createdBy == request.auth.uid ||
        get(/databases/$(database)/documents/routines/$(routineId)).data.createdBy == request.auth.uid
      );
      allow delete: if isAuthenticated() && (
        resource.data.createdBy == request.auth.uid ||
        get(/databases/$(database)/documents/routines/$(routineId)).data.createdBy == request.auth.uid
      );
    }

    match /habits/{habitId}/tasks/{taskId} {
      allow read: if isAuthenticated() && (
        resource == null ||
        resource.data.userId == request.auth.uid ||
        get(/databases/$(database)/documents/habits/$(habitId)).data.userId == request.auth.uid
      );
      allow create: if isAuthenticated() && (
        request.resource.data.userId == request.auth.uid ||
        get(/databases/$(database)/documents/habits/$(habitId)).data.userId == request.auth.uid
      );
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        get(/databases/$(database)/documents/habits/$(habitId)).data.userId == request.auth.uid
      );
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        get(/databases/$(database)/documents/habits/$(habitId)).data.userId == request.auth.uid
      );
    }

    match /challenges/{challengeId}/tasks/{taskId} {
      allow read: if isAuthenticated() && (
        resource == null ||
        resource.data.userId == request.auth.uid ||
        resource.data.participants.hasAny([request.auth.uid]) ||
        get(/databases/$(database)/documents/challenges/$(challengeId)).data.participants.hasAny([request.auth.uid])
      );
      allow create: if isAuthenticated() && (
        request.resource.data.userId == request.auth.uid ||
        get(/databases/$(database)/documents/challenges/$(challengeId)).data.createdBy == request.auth.uid
      );
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.participants.hasAny([request.auth.uid]) ||
        get(/databases/$(database)/documents/challenges/$(challengeId)).data.createdBy == request.auth.uid
      );
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        get(/databases/$(database)/documents/challenges/$(challengeId)).data.createdBy == request.auth.uid
      );
    }

    // Routines collection
    match /routines/{routineId} {
      allow read: if isAuthenticated() && 
        (resource == null || isRoutineParticipant(resource.data) || isInvited(resource.data.invites));
      
      allow create: if isAuthenticated() && hasCompletedOnboarding() && (
        request.resource.data.createdBy == request.auth.uid &&
        request.resource.data.keys().hasAll(['invites', 'participants', 'tasks', 'title', 'description']) &&
        request.resource.data.invites is list &&
        request.resource.data.participants is list &&
        request.resource.data.tasks is list &&
        request.resource.data.title is string &&
        request.resource.data.description is string &&
        request.resource.data.active == true
      );
      
      allow update: if isAuthenticated() && (
        isRoutineCreator(resource.data) ||
        isParticipant(resource.data.participants) ||
        isInvited(resource.data.invites)
      );
      
      allow delete: if isAuthenticated() && resource.data.createdBy == request.auth.uid;
    }

    // Habits collection
    match /habits/{habitId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated();
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Challenges collection (template challenges)
    match /challenges/{challengeId} {
      allow read: if isAuthenticated() && hasCompletedOnboarding();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Challenge Tasks collection
    match /challengeTasks/{taskId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && hasCompletedOnboarding();
      allow update: if isAuthenticated() && hasCompletedOnboarding() && (
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['status', 'completed', 'completedAt', 'lastCompleted', 'completions', 'lastUpdatedBy']) &&
        request.resource.data.lastUpdatedBy == request.auth.uid
      );
      allow delete: if isAuthenticated() && hasCompletedOnboarding();
    }

    // Posts collection
    match /posts/{postId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        // Allow updating likes
        (
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['likedBy', 'likedByDetails', 'likes']) &&
          request.resource.data.likedByDetails.size() == request.resource.data.likedBy.size()
        ) ||
        // Allow updating comments
        (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['comments']) &&
          request.resource.data.comments.size() >= resource.data.comments.size()
        ) ||
        // Allow updating other fields by post owner
        (
          resource.data.userId == request.auth.uid &&
          request.resource.data.userId == request.auth.uid
        )
      );
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Friend Requests collection
    match /friendRequests/{requestId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (
        request.resource.data.senderId == request.auth.uid ||
        request.resource.data.receiverId == request.auth.uid
      );
      allow update, delete: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid ||
        resource.data.receiverId == request.auth.uid
      );
    }

    // Incomplete Users (for onboarding)
    match /incompleteUsers/{userId} {
      allow create: if isAuthenticated() && isOwner(userId);
      allow read, update, delete: if isOwner(userId);
    }

    // Add badges collection rules
    match /badges/{badgeId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Goals collection (if using root-level collection)
    match /goals/{goalId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Goal Stats collection (if using root-level collection)
    match /goalStats/{userId} {
      allow read: if isAuthenticated() && userId == request.auth.uid;
      allow write: if isAuthenticated() && userId == request.auth.uid;
    }
    
    // Usernames collection
    match /usernames/{username} {
      allow read: if true;
      
      allow create: if isAuthenticated() && (
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['userId', 'username', 'createdAt']) &&
        request.resource.data.username.lower() == username
      );

      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid
      );

      allow update: if false;
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 