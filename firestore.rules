rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isParticipant(participants) {
      return participants.hasAny([request.auth.uid]);
    }

    function isInvited(invites) {
      return invites.hasAny([request.auth.uid]);
    }

    function isCreator(createdBy) {
      return createdBy == request.auth.uid;
    }

    function hasCompletedOnboarding() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    function isSignedIn() {
      return request.auth != null;
    }
    
    function isRoutineCreator(routineData) {
      return isSignedIn() && routineData.createdBy == request.auth.uid;
    }
    
    function isRoutineParticipant(routineData) {
      return isSignedIn() && (routineData.participants.hasAny([request.auth.uid]));
    }
    
    
    // Helper function to check if users are friends
    function areFriends(userId) {
      return isAuthenticated() && (
        // Check if the user exists in the friends array
        get(/databases/$(database)/documents/users/$(userId)).data.friends.hasAny([request.auth.uid]) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.friends.hasAny([userId])
      );
    }

    // Incomplete Users (for onboarding)
    match /incompleteUsers/{userId} {
      allow create: if isAuthenticated() && isOwner(userId);
      allow read, update, delete: if isOwner(userId);
    }

// Users collection
match /users/{userId} {
  // Allow user search for authenticated users
  allow list: if isAuthenticated();
  allow get: if true;
  allow create: if isOwner(userId);
  
  // Main update rule
  allow update: if isAuthenticated() && (
    // Case 1: User updating their own data
    (
      isOwner(userId) &&
      request.resource.data.diff(resource.data).affectedKeys()
        .hasOnly(['unreadNotifications', 'friends', 'routines', 
                 'lastActive', 'activeTasks', 'stats', 'habits', 'challenges',
                 'lastRoutineSync', 'displayName', 'photoURL', 'username', 
                 'bio', 'level', 'xp', 'badges', 'achievements', 'cachedData'])
    ) ||
    
    // Case 2: Friend updates (simplified)
    (
      // Only allow friends array to be modified
      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['friends']) &&
      // Ensure other fields remain unchanged
      request.resource.data.diff(resource.data).unchangedKeys().hasAll(
        resource.data.keys().removeAll(['friends'])
      )
    ) ||
    
    // Case 3: Cache updates
    (
      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['cachedData']) &&
      isAuthenticated()
    )
  );
  
  allow delete: if isOwner(userId);

  // Notifications subcollection - simplify
  match /notifications/{notificationId} {
    allow read: if request.auth.uid == userId;
    allow create: if isAuthenticated();
    allow update: if request.auth.uid == userId;
    allow delete: if request.auth.uid == userId;
  }

  // User's routines subcollection
  match /routines/{routineId} {
    allow read, write: if request.auth.uid == userId;
  }
}
    
    // Routines collection
    match /routines/{routineId} {
      allow read: if isSignedIn() && 
        (resource == null || isRoutineParticipant(resource.data));
      
      allow create: if isAuthenticated() && hasCompletedOnboarding() && (
        request.resource.data.createdBy == request.auth.uid &&
        request.resource.data.keys().hasAll(['invites', 'participants', 'tasks', 'title', 'description']) &&
        request.resource.data.invites is list &&
        request.resource.data.participants is list &&
        request.resource.data.tasks is list &&
        request.resource.data.title is string &&
        request.resource.data.description is string
      );
      
      allow update: if isAuthenticated() && (
        request.resource.data.createdBy == request.auth.uid ||
        resource.data.participants.hasAny([request.auth.uid]) ||
        resource.data.invites.hasAny([request.auth.uid])
      );
      
      allow delete: if isRoutineCreator(resource.data);
    }

    // Tasks collection (for completions)
    match /tasks/{taskId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() && 
        request.resource.data.createdBy == request.auth.uid;
      
      allow update: if isAuthenticated() && (
        resource.data.createdBy == request.auth.uid ||
        (resource.data.participants.hasAny([request.auth.uid]) &&
         request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['completions', 'lastUpdated']))
      );
      
      allow delete: if isAuthenticated() && 
        resource.data.createdBy == request.auth.uid;
    }

    // Posts collection
    match /posts/{postId} {
      allow read: if true;

      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll(['userId', 'username', 'createdAt', 'privacy']) &&
        request.resource.data.privacy in ['public', 'friends', 'private'];

      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid &&
        request.resource.data.userId == request.auth.uid;

      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    // Challenges collection
    match /challenges/{challengeId} {
      allow read: if isAuthenticated() && hasCompletedOnboarding();
      allow create: if isAuthenticated() && hasCompletedOnboarding();
      allow update: if isAuthenticated() && hasCompletedOnboarding() && (
        isCreator(resource.data.createdBy) || 
        isParticipant(resource.data.participants) ||
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['participants']) &&
         request.resource.data.participants.hasOnly(resource.data.participants.concat([request.auth.uid])))
      );
      allow delete: if isAuthenticated() && hasCompletedOnboarding() && 
        isCreator(resource.data.createdBy);
    }

    // Friend Requests collection
    match /friendRequests/{requestId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (
        request.resource.data.senderId == request.auth.uid ||
        request.resource.data.receiverId == request.auth.uid
      );
      allow update: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid ||
        resource.data.receiverId == request.auth.uid
      );
      allow delete: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid ||
        resource.data.receiverId == request.auth.uid
      );
    }

    // Habits collection
    match /habits/{habitId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isAuthenticated() && (
        isCreator(resource.data.createdBy) || 
        isParticipant(resource.data.participants)
      );
      allow delete: if isAuthenticated() && isCreator(resource.data.createdBy);
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 